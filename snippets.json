[{"id":24994,"title":"PMP Pro - Remove OFAC Sanctioned Countries","code":"\/**\r\n * Remove country from country list.\r\n * Add this code to your PMPro Customizations Plugin - https:\/\/www.paidmembershipspro.com\/create-a-plugin-for-pmpro-customizations\/\r\n *\/\r\n \r\n function remove_country_example( $countries ) {\r\n  \r\n  unset( $countries['BI'] );  \r\n  unset( $countries['BY'] ); \r\n  unset( $countries['CD'] ); \r\n  unset( $countries['CF'] ); \r\n  unset( $countries['CG'] ); \r\n  unset( $countries['CU'] ); \r\n  unset( $countries['IQ'] ); \r\n  unset( $countries['IR'] ); \r\n  unset( $countries['LB'] ); \r\n  unset( $countries['LY'] ); \r\n  unset( $countries['ML'] ); \r\n  unset( $countries['NI'] ); \r\n  unset( $countries['SD'] ); \r\n  unset( $countries['SO'] ); \r\n  unset( $countries['SY'] ); \r\n  unset( $countries['UA'] ); \r\n  unset( $countries['VE'] ); \r\n  unset( $countries['YE'] ); \r\n  unset( $countries['ZW'] ); \r\n  \r\n  return $countries;\r\n }\r\n add_filter( 'pmpro_countries', 'remove_country_example' );","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2024-11-23 18:15:20","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":24992,"title":"WP - Restrict Search By Membership Level","code":"\/\/ Restrict Search Results Page By Membership Level\r\nfunction restrict_search_results_by_membership($query) {\r\n    global $wpdb;\r\n\r\n    if (!is_admin() && $query->is_main_query() && $query->is_search()) {\r\n        if (is_user_logged_in()) {\r\n            $user_id = get_current_user_id();\r\n            $membership_levels = pmpro_getMembershipLevelsForUser($user_id);\r\n\t\t\t\r\n\t\t\t\/\/ Log the Allowed Levels For The Page\r\n\t\t\terror_log('Allowed Levels: ' . print_r($membership_levels, true));\r\n\r\n\r\n            if (!empty($membership_levels)) {\r\n                $allowed_levels = wp_list_pluck($membership_levels, 'id');\r\n\r\n                \/\/ Fetch IDs of restricted posts\/pages for the user's membership levels\r\n                $restricted_posts = $wpdb->get_col(\r\n                    \"SELECT page_id FROM {$wpdb->prefix}pmpro_memberships_pages WHERE membership_id IN (\" . implode(',', $allowed_levels) . \")\"\r\n                );\r\n\r\n                \/\/ Restrict search results to those posts\r\n                $query->set('post__in', $restricted_posts);\r\n            } else {\r\n                \/\/ No membership levels, exclude all restricted content\r\n                $query->set('post__in', array(0));\r\n            }\r\n        } else {\r\n            \/\/ User is not logged in, exclude all restricted content\r\n            $query->set('post__in', array(0));\r\n        }\r\n    }\r\n}\r\nadd_action('pre_get_posts', 'restrict_search_results_by_membership');\r\n\r\n\r\n\/\/Restrict Spyglass Search By Membership Level As Well\r\nfunction filter_search_results_by_membership($query) {\r\n    global $wpdb;\r\n\r\n    \/\/ Determine if it's an AJAX or standard search query\r\n    $is_ajax = defined('DOING_AJAX') && DOING_AJAX;\r\n\r\n    \/\/ Only proceed for search queries\r\n    if (($is_ajax || (!is_admin() && $query->is_main_query())) && $query->is_search()) {\r\n        \/\/ Get the current user's membership levels\r\n        if (is_user_logged_in()) {\r\n            $user_id = get_current_user_id();\r\n            $membership_levels = pmpro_getMembershipLevelsForUser($user_id);\r\n\r\n            if (!empty($membership_levels)) {\r\n                \/\/ Extract membership level IDs\r\n                $membership_level_ids = wp_list_pluck($membership_levels, 'id');\r\n\r\n                \/\/ Get restricted posts\/pages for the user's membership levels\r\n                $allowed_post_ids = $wpdb->get_col(\r\n                    \"SELECT page_id \r\n                     FROM {$wpdb->prefix}pmpro_memberships_pages \r\n                     WHERE membership_id IN (\" . implode(',', $membership_level_ids) . \")\"\r\n                );\r\n\r\n                \/\/ Modify the search query to include only allowed posts\/pages\r\n                if (!empty($allowed_post_ids)) {\r\n                    $query->set('post__in', $allowed_post_ids);\r\n                } else {\r\n                    \/\/ If no posts are allowed, return no results\r\n                    $query->set('post__in', array(0));\r\n                }\r\n            } else {\r\n                \/\/ User has no membership levels, exclude all restricted posts\r\n                $query->set('post__in', array(0));\r\n            }\r\n        } else {\r\n            \/\/ If the user is not logged in, exclude all restricted posts\r\n            $query->set('post__in', array(0));\r\n        }\r\n    }\r\n}\r\nadd_action('pre_get_posts', 'filter_search_results_by_membership');\r\n","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2024-11-23 21:03:31","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":24995,"title":"WP Bouncer - Simultaneous Logins","code":"\/\/ Limit Simultaneous Logins To 3\r\nfunction my_wp_bouncer_number_simultaneous_logins($num) {\r\n  return 3;\r\n}\r\nadd_filter('wp_bouncer_number_simultaneous_logins', 'my_wp_bouncer_number_simultaneous_logins');","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2024-11-23 18:30:29","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":24996,"title":"PMP Pro - New or Renewal","code":"\/*\r\n * Adds a \"Renewal\" column to the Orders list and order CSV export\r\n * to show if the order is a membership renewal.\r\n *\/\r\nfunction my_pmpro_is_order_renewal( $order ) {\r\n\tglobal $wpdb;\r\n\r\n\t\/\/check for earlier orders with the same user_id and membership_id\r\n\t$sqlQuery = \"SELECT id FROM $wpdb->pmpro_membership_orders WHERE \r\n\t\t\tuser_id = '\" . esc_sql($order->user_id) . \"' AND \r\n\t\t\tmembership_id = '\" . esc_sql($order->membership_id) . \"' AND \r\n\t\t\tid <> '\" . esc_sql($order->id) . \"' AND\r\n\t\t\ttimestamp < '\" . date(\"Y-m-d H:i:s\", $order->timestamp) . \"' \r\n\t\t\tLIMIT 1\";\r\n\r\n\t$earlier_order = $wpdb->get_var($sqlQuery);\t\t\t\t\r\n\tif(empty($earlier_order))\r\n\t\treturn false;\r\n\r\n\t\/\/must be recurring\r\n\treturn true;\r\n}\r\n\r\n\/*\r\n *\tadd recurring column to orders table\r\n *\/\r\n\/\/table header\r\nfunction my_pmpro_orders_extra_cols_renewal_header()\r\n{\r\n?>\r\n<th>Renewal?<\/th>\r\n<?php\r\n\/\/ Add a New Column To PMP Pro Reports If The User Is New Or Renewal\r\n}\r\nadd_action('pmpro_orders_extra_cols_header', 'my_pmpro_orders_extra_cols_renewal_header');\r\n\r\n\/\/table body\r\nfunction my_pmpro_orders_extra_cols_renewal_body($order)\r\n{\r\n\t?>\r\n\t<td>\r\n\t<?php\r\n\tif( my_pmpro_is_order_renewal( $order ) )\r\n\t\techo \"Yes\";\r\n\telse\r\n\t\techo \"No\";\r\n\t?>\r\n\t<\/td>\r\n\t<?php\r\n}\r\nadd_action('pmpro_orders_extra_cols_body', 'my_pmpro_orders_extra_cols_renewal_body');\r\n\r\n\/*\r\n\tadd recurring column to orders export\r\n*\/\r\nfunction my_pmpro_orders_csv_extra_columns_renewal($columns)\r\n{\r\n\t$columns['renewal'] = 'my_pmpro_orders_csv_recurring_column_renewal';\r\n\treturn $columns;\r\n}\r\nadd_filter('pmpro_orders_csv_extra_columns', 'my_pmpro_orders_csv_extra_columns_renewal');\r\n\r\nfunction my_pmpro_orders_csv_recurring_column_renewal($order)\r\n{\r\n\tif(my_pmpro_is_order_renewal($order))\r\n\t\treturn \"Yes\";\r\n\telse\r\n\t\treturn \"No\";\r\n}","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2024-11-23 18:31:50","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":24998,"title":"PMP Pro - Block Undesired Usernames","code":"\/**\r\n * Exclude specific terms from usernames during membership checkout.\r\n * Edit line 44 to set your unique list of terms to block.\r\n * Learn more at www.paidmembershipspro.com\/restrict-words-username\r\n *\r\n * title: Exclude specific terms from usernames during membership checkout.\r\n * layout: snippet\r\n * collection: checkout\r\n * category: registration-check\r\n *\r\n * You can add this recipe to your site by creating a custom plugin\r\n * or using the Code Snippets plugin available for free in the WordPress repository.\r\n * Read this companion article for step-by-step directions on either method.\r\n * https:\/\/www.paidmembershipspro.com\/create-a-plugin-for-pmpro-customizations\/\r\n *\/\r\n\r\n\/**\r\n* Check if the username used at checkout contains an invalid term.\r\n* Block checkout and show an error message if the username is invalid.\r\n*\r\n*\/\r\nfunction invalid_username_pmpro_registration_checks( $value ) {\r\n\t\/\/ Get username from the form submission.\r\n\t$username = $_REQUEST['username'];\r\n\r\n\t\/\/ Check username for invalid terms.\r\n\tif ( my_check_for_invalid_username_terms( $username ) ) {\r\n\t\tglobal $pmpro_msg, $pmpro_msgt;\r\n\t\t$pmpro_msg = \"Hey, that's not a nice username!\";\r\n\t\t$pmpro_msgt = \"pmpro_error\";\r\n\t\t$value = false;\r\n\t}\r\n\r\n\t\/\/ Return whether the check is good or bad.\r\n\treturn $value;\r\n}\r\nadd_filter( 'pmpro_registration_checks', 'invalid_username_pmpro_registration_checks', 10, 1 );\r\n\r\n\/**\r\n * Check the passed username for your custom defined invalid terms.\r\n *\/\r\nfunction my_check_for_invalid_username_terms( $username ) {\r\n\t\/\/ Update this variable to include the terms you want to block, separated by bars.\r\n\t$invalid_terms = 'fuck|shit|cunt|shitbird';\r\n\r\n\t\/\/ Check submitted username for any of the invalid terms.\r\n\tif ( preg_match( \"\/(\" . $invalid_terms . \")\/i\", $username ) ) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t\/\/ If the username is ok, return false.\r\n\treturn false;\r\n}","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2024-12-12 02:49:58","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":24999,"title":"PMPro - Cancel Subscription After Failed Payment","code":"\/*\r\n  Cancel subscriptions when a recurring payment fails. As of PMPro version 1.5.9.1, failed payments reported via Stripe webhook, PayPal IPN handler, or Authorize.net silent post kick off the pmpro_subscription_payment_failed action.\r\n\t\r\n  Also make sure to edit the default billing_failure.html email to mention that users are cancelled upon failure. To do so, copy paid-memberships-pro\/email\/billing_failure.html into themes\/{active theme}\/paid-memberships-pro\/email\/ and edit the text to suit your need.\r\n\t\r\n  Note: This cancels on the first failure. To cancel only when cancelling at Stripe, see this gist: https:\/\/gist.github.com\/strangerstudios\/5093710\t\r\n*\/\r\nfunction my_pmpro_subscription_payment_failed($order)\r\n{\r\n\t\/\/Cancel the membership\r\n\tpmpro_changeMembershipLevel(0, $order->user_id);\t\t\r\n}\r\nadd_action(\"pmpro_subscription_payment_failed\", \"my_pmpro_subscription_payment_failed\");","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2024-11-23 18:39:48","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":25000,"title":"PMP Pro - Show Next Payment Date","code":"\/**\r\n * Show next payment date under 'Expiration' field in PMPro account page.\r\n * Add this code to your PMPro Customizations Plugin - https:\/\/www.paidmembershipspro.com\/create-a-plugin-for-pmpro-customizations\/\r\n * Works for PayPal Express and Stripe payment gateways.\r\n * www.paidmembershipspro.com\r\n *\/\r\n\/\/ Change the expiration text to show the next payment date instead of the expiration date\r\n\/\/ This hook is setup in the wp_renewal_dates_setup function below\r\nfunction my_pmpro_expiration_text($expiration_text) {\r\n    global $current_user;\r\n    $next_payment = pmpro_next_payment();\r\n        \r\n    if( $next_payment ){\r\n        $expiration_text = date_i18n( get_option( 'date_format' ), $next_payment );\r\n    }\r\n    \r\n    return $expiration_text;\r\n}\r\n\r\n\/\/ Change \"expiration date\" to \"renewal date\"\r\n\/\/ This hook is setup in the wp_renewal_dates_setup function below\r\nfunction change_expiration_date_to_renewal_date($translated_text, $original_text, $domain) {\r\n    if($domain === 'paid-memberships-pro' && $original_text === 'Expiration')\r\n        $translated_text = 'Renewal Date';\r\n    \r\n    return $translated_text;\r\n}\r\n\r\n\/\/ Logic to figure out if the user has a renewal date and to setup the hooks to show that instead\r\nfunction wp_renewal_dates_setup() {\r\n    global $current_user, $pmpro_pages;\r\n    \r\n    \/\/ in case PMPro is not active\r\n    if(!function_exists('pmpro_getMembershipLevelForUser'))\r\n        return;\r\n    \r\n    \/\/ If the user has an expiration date, tell PMPro it is expiring \"soon\" so the renewal link is shown\r\n    $membership_level = pmpro_getMembershipLevelForUser($current_user->ID);            \r\n    if(!empty($membership_level) && !pmpro_isLevelRecurring($membership_level))\r\n        add_filter('pmpro_is_level_expiring_soon', '__return_true');    \r\n    \r\n    if( is_page( $pmpro_pages[ 'account' ] ) ) {\r\n        \/\/ If the user has no expiration date, add filter to change \"expiration date\" to \"renewal date\"        \r\n        if(!empty($membership_level) && (empty($membership_level->enddate) || $membership_level->enddate == '0000-00-00 00:00:00'))\r\n            add_filter('gettext', 'change_expiration_date_to_renewal_date', 10, 3);        \r\n        \r\n        \/\/ Check to see if the user's last order was with PayPal Express, else assume it was with Stripe.\r\n        \/\/ These filters make the next payment calculation more accurate by hitting the gateway\r\n        $order = new MemberOrder();\r\n        $order->getLastMemberOrder( $current_user->ID );\r\n        if( !empty($order) && $order->gateway == 'paypalexpress') {\r\n            add_filter('pmpro_next_payment', array('PMProGateway_paypalexpress', 'pmpro_next_payment'), 10, 3);    \r\n        }else{\r\n            add_filter('pmpro_next_payment', array('PMProGateway_stripe', 'pmpro_next_payment'), 10, 3);    \r\n        }\r\n    }\r\n    add_filter('pmpro_account_membership_expiration_text', 'my_pmpro_expiration_text');    \r\n}\r\nadd_action('wp', 'wp_renewal_dates_setup', 11);","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2024-11-23 18:40:43","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":25001,"title":"PMPro - Don't Run Re-Captcha on Checkout","code":"\/**\r\n * This recipe stops Contact Form 7's recaptcha javascript from loading\r\n * on the PMPro checkout page. This helps prevent conflicts from recaptcha\r\n * being loaded twice.\r\n *\r\n * You can add this recipe to your site by creating a custom plugin\r\n * or using the Code Snippets plugin available for free in the WordPress repository.\r\n * Read this companion article for step-by-step directions on either method.\r\n * https:\/\/www.paidmembershipspro.com\/create-a-plugin-for-pmpro-customizations\/\r\n *\/\r\n\r\nfunction disable_cf7_recaptcha_on_pmpro_checkout() {\r\n\tglobal $pmpro_pages, $recaptcha;\r\n\tif ( defined( 'WPCF7_VERSION' ) && is_page( $pmpro_pages['checkout'] ) && $recaptcha ) {\r\n\t\twp_dequeue_script( 'google-recaptcha' );\r\n\t}\r\n}\r\nadd_action( 'wp_print_scripts', 'disable_cf7_recaptcha_on_pmpro_checkout' );","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2024-11-25 01:04:23","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":25002,"title":"PMP Pro - Make Coupons Work With Variable Pricing","code":"function mypmpro_override_pmprovp_checkout(){\r\n\tremove_filter( 'pmpro_checkout_level', 'pmprovp_pmpro_checkout_level' );\r\n}\r\nadd_action( 'init', 'mypmpro_override_pmprovp_checkout' );\r\n\r\nfunction my_pmprovp_pmpro_checkout_level( $level ) {\r\n\t\/\/ Get variable pricing info.\r\n\t\r\n\tif( !empty( $_REQUEST['discount_code'] ) ){\r\n\t\treturn $level;\r\n\t}\r\n\r\n\t$vpfields = pmprovp_get_settings( $level->id );\r\n\r\n\t\/\/ Make sure level has variable pricing.\r\n\tif ( empty( $vpfields ) || empty( $vpfields['variable_pricing'] ) ) {\r\n\t\treturn $level;\r\n\t}\r\n\r\n\tif ( isset( $_REQUEST['price'] ) ) {\r\n\t\t$price = preg_replace( '[^0-9\\.\\,]', '', $_REQUEST['price'] );\r\n\t}\r\n\r\n\tif ( isset( $price ) ) {\r\n\t\t$level->initial_payment = $price;\r\n\r\n\t\tif ( $level->billing_amount > 0 ) {\r\n\t\t\t$level->billing_amount = $price;\r\n\t\t}\r\n\t}\r\n\r\n\treturn $level;\r\n}\r\nadd_filter( 'pmpro_checkout_level', 'my_pmprovp_pmpro_checkout_level' );","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2024-11-23 18:43:46","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":25021,"title":"KLEO - Disable Masonry Search Results","code":"function disable_masonry_layout() {\r\n    wp_dequeue_script('masonry'); \/\/ Disable core Masonry script\r\n    wp_dequeue_script('kleo-masonry'); \/\/ Disable theme's Masonry script (replace with actual handle if different)\r\n}\r\nadd_action('wp_enqueue_scripts', 'disable_masonry_layout', 20);","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2024-11-23 21:14:54","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":25054,"title":"WP - Allow Content Not Requiring Membership To Show In Search Results","code":"\/\/ For Search Results Page\r\nfunction include_non_membership_content_in_search( $query ) {\r\n    \/\/ Check if it's a search query and not an admin page\r\n    if ( !is_admin() && $query->is_search && $query->is_main_query() ) {\r\n        \/\/ Adjust query to include all content that doesn't require membership\r\n        $meta_query = array(\r\n            'relation' => 'OR',\r\n            array(\r\n                'key'     => 'pmpro_has_access', \/\/ Adjust if this meta key is different\r\n                'value'   => '1',\r\n                'compare' => '='\r\n            ),\r\n            array(\r\n                'key'     => 'pmpro_has_access',\r\n                'compare' => 'NOT EXISTS' \/\/ Include content without this meta key\r\n            )\r\n        );\r\n\r\n        \/\/ Set the meta query for the search\r\n        $query->set( 'meta_query', $meta_query );\r\n    }\r\n}\r\nadd_action( 'pre_get_posts', 'include_non_membership_content_in_search' );\r\n\r\n\r\n\/\/For Spyglass Search\r\n$args = array(\r\n    'post_type'      => 'any', \/\/ Adjust to your desired post type(s)\r\n    'posts_per_page' => -1,    \/\/ Adjust pagination as needed\r\n    'meta_query'     => array(\r\n        'relation' => 'OR',\r\n        array(\r\n            'key'     => 'pmpro_has_access',\r\n            'value'   => '1',\r\n            'compare' => '='\r\n        ),\r\n        array(\r\n            'key'     => 'pmpro_has_access',\r\n            'compare' => 'NOT EXISTS' \/\/ Include content without this meta key\r\n        )\r\n    )\r\n);\r\n\r\n$query = new WP_Query( $args );\r\n\r\nif ( $query->have_posts() ) {\r\n    while ( $query->have_posts() ) {\r\n        $query->the_post();\r\n        \/\/ Output your content here\r\n    }\r\n    wp_reset_postdata();\r\n}\r\n","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2024-11-25 00:51:55","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":24997,"title":"PMP Pro - Gift Levels","code":"\/* PMPro Gift Levels Example *\/\r\n\r\nglobal $pmprogl_gift_levels;\r\n\r\n$pmprogl_gift_levels = array(\r\n    \/\/ Set level 5 is a \"Purchase Gift\" membership level to create a customized level 1 (Tutorials) gift.\r\n    5 => array(\r\n        'level_id' => 1,                \/\/ Create a gift code for level 1\r\n        'initial_payment' => 0,         \/\/ with an initial payment of $0.00\r\n        'billing_amount' => 0,          \/\/ and a recurring billing amount of $0.00\r\n        'cycle_number' => 0,            \/\/ every 0\r\n        'cycle_period' => 'Month',      \/\/ months\r\n        'billing_limit' => 0,           \/\/ for 0 months.\r\n        'trial_amount' => 0,            \/\/ Add a free ($0.00) trial for\r\n        'trial_limit' => 0,             \/\/ 0 subscription payment (1 months).\r\n        'expiration_number' => 6,       \/\/ This level expires in 6\r\n        'expiration_period' => 'Month'  \/\/ months.\r\n    ),\r\n\t\/\/ Set level 5 is a \"Purchase Gift\" membership level to create a customized level 3 (BTS) gift.\r\n    6 => array(\r\n        'level_id' => 3,                \/\/ Create a gift code for level 3\r\n        'initial_payment' => 0,         \/\/ with an initial payment of $0.00\r\n        'billing_amount' => 0,          \/\/ and a recurring billing amount of $0.00\r\n        'cycle_number' => 0,            \/\/ every 0\r\n        'cycle_period' => 'Month',      \/\/ months\r\n        'billing_limit' => 0,           \/\/ for 0 months.\r\n        'trial_amount' => 0,            \/\/ Add a free ($0.00) trial for\r\n        'trial_limit' => 0,             \/\/ 0 subscription payment (1 months).\r\n        'expiration_number' => 3,       \/\/ This level expires in 3\r\n        'expiration_period' => 'Month'  \/\/ months.\r\n    )\r\n);\r\n\r\n\/\/ Make levels 2 and 4 require a discount code at checkout.\r\n\/\/$pmprogl_require_gift_code = array(2,4);\r\n\r\n\/* PMPro Gift Levels Examples and Documentation\r\n\r\n    \/\/ Set level 1 as a \"Purchase Gift\" membership level to create a gift code for a free level 2 gift.\r\n    1 => array(                     \/\/ \"Purchase Gift\" level ID\r\n        'level_id' => 2,            \/\/ Membership Level ID of the gift membership level.\r\n        'initial_payment' => 0,     \/\/ The initial payment for the gift membership level.\r\n        'billing_amount' => 0,      \/\/ The recurring billing amount for the gift membership level.The recurring billing amount for the gift membership level.\r\n        'cycle_number' => 0,        \/\/ The number of billing cycles for the gift membership level.\r\n        'cycle_period' => '',       \/\/ The billing cycle period. Possible values are \"Day\", \"Week\", \"Month\", and \"Year\" (without the quotes).\r\n        'billing_limit' => 0,       \/\/ The billing cycle limit for the gift membership level.\r\n        'trial_amount' => 0,        \/\/ The trial amount for the gift membership level.\r\n        'trial_limit' => 0,         \/\/ The number of cycles the trial should last for the gift membership level.\r\n        'expiration_number' => 0,   \/\/ The number of \"experiation_period\"s before the gift membership level expires.\r\n        'expiration_period' => ''   \/\/ The duration of the period used by \"expiration_number\". Possible values are \"Day\", \"Week\", \"Month\", and \"Year\" (without the quotes).\r\n    ),\r\n    \/\/ Also, set level 3 as a \"Purchase Gift\" membership level to create a customized level 4 gift.\r\n    3 => array(\r\n        'level_id' => 4,                \/\/ Create a gift code for level 4\r\n        'initial_payment' => 10,        \/\/ with an initial payment of $10.00\r\n        'billing_amount' => 10,         \/\/ and a recurring billing amount of $10.00\r\n        'cycle_number' => 1,            \/\/ every 1\r\n        'cycle_period' => 'Month',      \/\/ months\r\n        'billing_limit' => 12,          \/\/ for 12 months.\r\n        'trial_amount' => 0,            \/\/ Add a free ($0.00) trial for\r\n        'trial_limit' => 1,             \/\/ 1 subscription payment (1 months).\r\n        'expiration_number' => 1,       \/\/ This level expires in 1\r\n        'expiration_period' => 'Year'   \/\/ year.\r\n\r\n*\/","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2024-11-25 00:51:42","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":25240,"title":"WP- Bypass Logout Confirmation","code":"add_action('check_admin_referer', 'logout_without_confirm', 10, 2);\r\nfunction logout_without_confirm($action, $result)\r\n{\r\n    \/**\r\n     * Allow logout without confirmation\r\n     *\/\r\n    if ($action == \"log-out\" && !isset($_GET['_wpnonce'])) {\r\n        $redirect_to = isset($_REQUEST['redirect_to']) ? $_REQUEST['redirect_to'] : 'LogoutRedirectURL';\r\n        $location = str_replace('&amp;', '&', wp_logout_url($redirect_to));\r\n        header(\"Location: $location\");\r\n        die;\r\n    }\r\n}","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2024-11-25 00:58:48","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":25241,"title":"WP- Redirect Upon Login To Homepage","code":"function admin_default_page() {\r\n  return '\/';\r\n}\r\n\r\nadd_filter('login_redirect', 'admin_default_page');","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2024-11-25 00:59:39","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":25242,"title":"PMPro - Enable Stripe Legacy API","code":"add_filter( 'pmpro_stripe_show_legacy_keys_settings', '__return_true' );","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2024-11-25 01:01:03","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":25243,"title":"PMPro - Request (but do not force) users to provide reason for cancelling","code":"remove_action( 'init', 'pmpror4c_init' );","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2024-11-25 01:02:25","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":25244,"title":"PMPro Variable Pricing + Coupon Code","code":"\/**\r\n * This recipe will take preference to discount codes. If a discount code is applied\r\n * and is free, the variable price field will be removed.\r\n * \r\n * You can add this recipe to your site by creating a custom plugin\r\n * or using the Code Snippets plugin available for free in the WordPress repository.\r\n * Read this companion article for step-by-step directions on either method.\r\n * https:\/\/www.paidmembershipspro.com\/create-a-plugin-for-pmpro-customizations\/\r\n *\/\r\n\r\nfunction my_pmprovp_pmpro_checkout_level( $level ) {\r\n\t\/\/ Get variable pricing info.\r\n\t\r\n\tremove_filter( 'pmpro_checkout_level', 'pmprovp_pmpro_checkout_level' );\r\n\r\n\tif( !empty( $_REQUEST['discount_code'] ) ){\r\n\r\n\t\t$discount_code = new PMPro_Discount_Code( $_REQUEST['discount_code']  );\r\n\r\n\t\tif( !empty( $discount_code ) ){\r\n\t\t\tif( isset( $discount_code->levels[$level->id] ) ){\r\n\t\t\t\tif( \r\n\t\t\t\t\t$discount_code->levels[$level->id]['initial_payment'] == 0 || \r\n\t\t\t\t\t$discount_code->levels[$level->id]['billing_amount'] == 0\r\n\t\t\t\t){\r\n\t\t\t\t\tremove_action( 'pmpro_checkout_after_level_cost', 'pmprovp_pmpro_checkout_after_level_cost' );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn $level;\r\n\r\n\t}\r\n\r\n\tif ( isset( $_REQUEST['price'] ) ) {\r\n\t\t$price = preg_replace( '[^0-9\\.\\,]', '', $_REQUEST['price'] );\r\n\t}\r\n\r\n\t$vpfields = pmprovp_get_settings( $level->id );\r\n\r\n\t\/\/ Make sure level has variable pricing.\r\n\tif ( empty( $vpfields ) || empty( $vpfields['variable_pricing'] ) ) {\r\n\t\treturn $level;\r\n\t}\r\n\r\n\r\n\tif ( isset( $price ) ) {\r\n\t\t$level->initial_payment = $price;\r\n\r\n\t\tif ( $level->billing_amount > 0 ) {\r\n\t\t\t$level->billing_amount = $price;\r\n\t\t}\r\n\t}\r\n\r\n\treturn $level;\r\n}\r\nadd_filter( 'pmpro_checkout_level', 'my_pmprovp_pmpro_checkout_level' );\r\n\r\n\/**\r\n * Handle things when the Apply Discount button is clicked on\r\n *\/\r\nfunction my_pmprovp_pmpro_after_discount_code_applied( $discount_code, $discount_code_id, $level_id ){\r\n\r\n\tif( !empty( $discount_code ) ){\r\n\r\n\t\t$discount_code_obj = new PMPro_Discount_Code( $discount_code  );\r\n\r\n\t\tif( !empty( $discount_code_obj ) ){\r\n\r\n\t\t\tif( isset( $discount_code_obj->levels[$level_id] ) ){\r\n\r\n\t\t\t\tif( \r\n\t\t\t\t\t$discount_code_obj->levels[$level_id]['initial_payment'] == 0 || \r\n\t\t\t\t\t$discount_code_obj->levels[$level_id]['billing_amount'] == 0\r\n\t\t\t\t){\r\n\r\n\t\t\t\t\techo \"jQuery('.pmprovp').remove();\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\nadd_action( 'pmpro_applydiscountcode_return_js', 'my_pmprovp_pmpro_after_discount_code_applied', 10, 3 );","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2024-11-25 01:03:23","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":25475,"title":"KLEO Template - Spyglass Search Filtering (BROKEN)","code":"add_action('wp_ajax_kleo_ajax_search', 'custom_kleo_ajax_search');\r\nadd_action('wp_ajax_nopriv_kleo_ajax_search', 'custom_kleo_ajax_search');\r\n\r\nfunction custom_kleo_ajax_search() {\r\n    ob_start();\r\n    \r\n    $search_term = isset($_REQUEST['s']) ? sanitize_text_field($_REQUEST['s']) : '';\r\n    \r\n    if (empty($search_term)) {\r\n        echo '<div class=\"kleo-ajax-no-results\">No search term provided<\/div>';\r\n        die();\r\n    }\r\n\r\n    $args = array(\r\n        'post_type' => 'post',\r\n        's' => $search_term,\r\n        'posts_per_page' => 10,\r\n        'post_status' => 'publish'\r\n    );\r\n\r\n    \/\/ Exclude invisible category\r\n    $invisible_cat = get_category_by_slug('invisible');\r\n    if ($invisible_cat) {\r\n        $args['category__not_in'] = array($invisible_cat->term_id);\r\n    }\r\n\r\n    $search_query = new WP_Query($args);\r\n    $found_posts = false;\r\n\r\n    if ($search_query->have_posts()) {\r\n        echo '<ul class=\"kleo-ajax-results\">';\r\n        \r\n        while ($search_query->have_posts()) {\r\n            $search_query->the_post();\r\n            $post_id = get_the_ID();\r\n            \r\n            \/\/ Check if post is accessible\r\n            $has_access = false;\r\n            \r\n            if (has_category('free', $post_id)) {\r\n                $has_access = true;\r\n            } elseif (function_exists('pmpro_has_membership_access')) {\r\n                $has_access_array = pmpro_has_membership_access($post_id, get_current_user_id(), true);\r\n                $has_access = $has_access_array[0];  \/\/ First element contains boolean access value\r\n            }\r\n            \r\n            if ($has_access) {\r\n                $found_posts = true;\r\n                get_template_part('page-parts\/search-ajax-item');\r\n            }\r\n        }\r\n        \r\n        echo '<\/ul>';\r\n    }\r\n    \r\n    if (!$found_posts) {\r\n        echo '<div class=\"kleo-ajax-no-results\">No results found<\/div>';\r\n    }\r\n\r\n    wp_reset_postdata();\r\n    \r\n    $output = ob_get_clean();\r\n    echo $output;\r\n    die();\r\n}","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2024-12-04 02:47:57","tags":[],"note":"","cloud_id":false,"custom_shortcode":""}]